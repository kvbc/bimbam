extends Node

const PLAYER_SPEED = 500
const PLAYER_IFRAMES = 0.5 # in seconds
const BULLET_SPEED = 600
const BULLET_LIFETIME = 5.0 # in seconds
const MAX_MAP_DEPTH = 15

class EnemyData:
	var contact_damage : int
	var move_speed     : int
	var bullet_damage  : int
	
	func _init (_move_speed, _contact_damage, _bullet_damage):
		move_speed     = _move_speed
		contact_damage = _contact_damage
		bullet_damage  = _bullet_damage

enum EnemyType {
	MENEL,
	CRACKHEAD,
	SKIN
}

#
#
# Direction
#
#

enum Dir {
	LEFT,
	RIGHT,
	UP,
	DOWN
}

func dir_vector (dir):
	return {
		Dir.LEFT  : Vector2.LEFT,
		Dir.RIGHT : Vector2.RIGHT,
		Dir.UP    : Vector2.UP,
		Dir.DOWN  : Vector2.DOWN
	}[dir]

func opposite_dir (dir):
	return {
		Dir.LEFT  : Dir.RIGHT,
		Dir.RIGHT : Dir.LEFT,
		Dir.UP    : Dir.DOWN,
		Dir.DOWN  : Dir.UP
	}[dir]

#
#
# Room
#
#

class MapRoom:
	var type  : String # see set_room_as_scene()
	var pos   : Vector2
	var idx   : int # used for the minimap
	var left  : MapRoom
	var right : MapRoom
	var up    : MapRoom
	var down  : MapRoom
	
	func _init (_type:String, _x:int, _y:int):
		type = _type
		pos = Vector2(_x, _y)
	
	func GetNeighbour (dir):
		if (dir == Dir.LEFT ): return left
		if (dir == Dir.RIGHT): return right
		if (dir == Dir.UP   ): return up
		if (dir == Dir.DOWN ): return down
	
	func HasNeighbour (dir):
		return GetNeighbour(dir) != null
	
	func SetNeighbour (dir, room : MapRoom):
		if   (dir == Dir.LEFT ): left  = room
		elif (dir == Dir.RIGHT): right = room
		elif (dir == Dir.UP   ): up    = room
		elif (dir == Dir.DOWN ): down  = room

#
#
# Private
#
#

var room_exits = { # room type -> room exit dirs
	"1x1": [Dir.LEFT, Dir.RIGHT, Dir.UP, Dir.DOWN],
	"1x2": [Dir.LEFT, Dir.RIGHT, Dir.UP, Dir.DOWN],
	"2x1": [Dir.LEFT, Dir.RIGHT, Dir.UP, Dir.DOWN],
	"2x2": [Dir.LEFT, Dir.RIGHT, Dir.UP, Dir.DOWN],
	"L1" : [          Dir.RIGHT, Dir.UP          ],
	"L2" : [          Dir.RIGHT,         Dir.DOWN],
	"L3" : [Dir.LEFT,                    Dir.DOWN],
	"L4" : [Dir.LEFT,            Dir.UP          ],
}
var room_types = {} # room exit dir -> room types - autogenerated in _ready()
var xy_map = {}  # vec2 -> MapRoom
var idx_map = [] # idx -> MapRoom
var map = MapRoom.new("2x2", 0, 0) # first MapRoom
var current_room : MapRoom
var current_room_scene
var player = preload("res://Scenes/Player.tscn").instance()

func expand_room (room:MapRoom, depth = 0):
	if (depth >= MAX_MAP_DEPTH):
		return
		
	xy_map[room.pos] = room
	room.idx = idx_map.size()
	idx_map.append(room)
	
	var exits = room_exits[room.type]
	var dir = exits[randi() % exits.size()]
	if not room.HasNeighbour(dir):
		var x = room.pos.x + dir_vector(dir).x
		var y = room.pos.y + dir_vector(dir).y
		if not xy_map.has(Vector2(x, y)):
			var opp_dir = opposite_dir(dir)
			var new_type = room_types[opp_dir][randi() % room_types[opp_dir].size()]
			var new_room = MapRoom.new(new_type, x, y)
			new_room.SetNeighbour(opp_dir, room)
			room.SetNeighbour(dir, new_room)
			expand_room(new_room, depth + 1)

func set_room_as_current_scene (room:MapRoom, entered_from_dir = null):
	if current_room != null:
		ALMinimap.MarkRoomInactive(current_room)
	ALMinimap.MarkRoomActive(room)
	
	player = preload("res://Scenes/Player.tscn").instance()
		
	get_tree().change_scene("res://Scenes/Rooms/" + room.type + ".tscn")
	yield(get_tree(), "idle_frame") # change_scene() is deferred
	current_room = room
	current_room_scene = get_tree().current_scene
	current_room_scene.InitRoom(
		room.HasNeighbour(Dir.LEFT),
		room.HasNeighbour(Dir.RIGHT),
		room.HasNeighbour(Dir.UP),
		room.HasNeighbour(Dir.DOWN)
	)
	
	if entered_from_dir != null:
		player.global_position = current_room_scene.GetExitPosition(entered_from_dir) + dir_vector(opposite_dir(entered_from_dir)) * 70
	else:
		player.global_position = Vector2(500, 300)
		
	current_room_scene.add_child(player)

func _ready ():
	for room_type in room_exits:
		for dir in room_exits[room_type]:
			if not room_types.has(dir):
				room_types[dir] = []
			room_types[dir].append(room_type)
	
	randomize()
	expand_room(map)
	yield(ALMinimap, "ready")
	set_room_as_current_scene(map)

#
#
# Public
#
#

func IsBodyPlayer (body: KinematicBody2D):
	return body is preload("res://Scripts/Player.gd")

func GetPlayer ():
	return player

func GetCurrentRoomScene ():
	return current_room_scene

func GetEnemyData (enemy_type):
	return {
		EnemyType.MENEL     : EnemyData.new(250, 1, 0),
		EnemyType.CRACKHEAD : EnemyData.new(250, 1, 1),
		EnemyType.SKIN      : EnemyData.new(250, 1, 0)
	}[enemy_type]

func EnemyNameToType (enemy_name):
	return {
		"Menel"    : EnemyType.MENEL,
		"Crackhead": EnemyType.CRACKHEAD,
		"Skin"     : EnemyType.SKIN
	}[enemy_name]

func MoveLeft   (): set_room_as_current_scene(current_room.GetNeighbour(Dir.LEFT ), Dir.RIGHT)
func MoveRight  (): set_room_as_current_scene(current_room.GetNeighbour(Dir.RIGHT), Dir.LEFT)
func MoveTop    (): set_room_as_current_scene(current_room.GetNeighbour(Dir.UP   ), Dir.DOWN)
func MoveBottom (): set_room_as_current_scene(current_room.GetNeighbour(Dir.DOWN ), Dir.UP)
